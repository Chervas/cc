import { NgIf, NgFor, TitleCasePipe, KeyValuePipe } from '@angular/common';
import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { ActivatedRoute, Router, RouterOutlet } from '@angular/router';
import { FuseFullscreenComponent } from '@fuse/components/fullscreen';
import { FuseLoadingBarComponent } from '@fuse/components/loading-bar';
import { FuseVerticalNavigationComponent } from '@fuse/components/navigation';
import { FuseMediaWatcherService } from '@fuse/services/media-watcher';
import { NavigationService } from 'app/core/navigation/navigation.service';
import { Navigation } from 'app/core/navigation/navigation.types';
import { LanguagesComponent } from 'app/layout/common/languages/languages.component';
import { MessagesComponent } from 'app/layout/common/messages/messages.component';
import { NotificationsComponent } from 'app/layout/common/notifications/notifications.component';
import { QuickChatComponent } from 'app/layout/common/quick-chat/quick-chat.component';
import { SearchComponent } from 'app/layout/common/search/search.component';
import { ShortcutsComponent } from 'app/layout/common/shortcuts/shortcuts.component';
import { UserComponent } from 'app/layout/common/user/user.component';
import { Subject, takeUntil } from 'rxjs';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { AuthService } from 'app/core/auth/auth.service';
import { ContactsService } from 'app/modules/admin/apps/contacts/contacts.service';
import { PacientesService } from 'app/modules/admin/apps/pacientes/pacientes.service';
import { ClinicSelectorComponent } from 'app/modules/admin/apps/clinicas/clinic-selector-component';
import { FuseNavigationService } from '@fuse/components/navigation';
import { ClinicFilterService } from 'app/core/services/clinic-filter-service';

@Component({
    selector: 'thin-layout',
    templateUrl: './thin.component.html',
    encapsulation: ViewEncapsulation.None,
    standalone: true,
    imports: [
        FuseLoadingBarComponent,
        FuseVerticalNavigationComponent,
        MatButtonModule,
        MatIconModule,
        LanguagesComponent,
        FuseFullscreenComponent,
        SearchComponent,
        ShortcutsComponent,
        MessagesComponent,
        NotificationsComponent,
        UserComponent,
        NgIf,
        NgFor,
        RouterOutlet,
        QuickChatComponent,
        FormsModule,
        MatFormFieldModule,
        MatSelectModule,
        TitleCasePipe,
        KeyValuePipe,
        ClinicSelectorComponent
    ]
})
export class ThinLayoutComponent implements OnInit, OnDestroy {
    isScreenSmall: boolean;
    navigation: Navigation;
    private _unsubscribeAll: Subject<any> = new Subject<any>();

    // ‚úÖ CONFIGURACI√ìN DE ADMINISTRADORES
    // üìã INSTRUCCIONES: Para agregar/quitar administradores, modifica este array con los IDs de usuario
    // Ejemplo: [1, 5, 10] Los usuarios con ID 1, 5 y 10 ser√°n administradores
    private readonly ADMIN_USER_IDS: number[] = [1]; // üëà MODIFICAR AQU√ç PARA AGREGAR M√ÅS ADMINS

    // Todas las cl√≠nicas del usuario
    allClinics: any[] = [];
    // Cl√≠nicas filtradas seg√∫n el rol del header
    roleFilteredClinics: any[] = [];
    // Selecci√≥n actual: puede ser una cl√≠nica individual o un grupo (objeto con isGroup y clinicasIds)
    selectedClinic: any = null;
    // Roles disponibles y rol seleccionado
    roles: string[] = [];
    selectedRole: string;
    currentUser: any;
    // Cl√≠nicas agrupadas (para mostrar en el lateral)
    groupedClinics: { [group: string]: any[] } = {};

    constructor(
        private _activatedRoute: ActivatedRoute,
        private _router: Router,
        private _navigationService: NavigationService,
        private _fuseMediaWatcherService: FuseMediaWatcherService,
        private authService: AuthService,
        private contactsService: ContactsService,
        private _pacientesService: PacientesService,
        private _fuseNavigationService: FuseNavigationService,
        private _clinicFilterService: ClinicFilterService
    ) {}

    get currentYear(): number {
        return new Date().getFullYear();
    }

    // ‚úÖ M√âTODO PARA DETECTAR ADMINISTRADORES
    // üìã Este m√©todo verifica si el usuario actual es administrador bas√°ndose en su ID
    // Los IDs de administradores se configuran en el array ADMIN_USER_IDS arriba
    private isAdmin(): boolean {
        if (!this.currentUser?.id_usuario) {
            return false;
        }
        return this.ADMIN_USER_IDS.includes(this.currentUser.id_usuario);
    }

    ngOnInit(): void {
        // Suscribirse a la navegaci√≥n
        this._navigationService.navigation$.pipe(takeUntil(this._unsubscribeAll))
            .subscribe((navigation: Navigation) => {
                this.navigation = navigation;
            });

        // Suscribirse a los cambios de medios
        this._fuseMediaWatcherService.onMediaChange$.pipe(takeUntil(this._unsubscribeAll))
            .subscribe(({ matchingAliases }) => {
                this.isScreenSmall = !matchingAliases.includes('md');
            });

        // Obtener el usuario y sus cl√≠nicas
        this.authService.getCurrentUser().subscribe(user => {
            this.currentUser = user;
            if (user && user.id_usuario) {
                // ‚úÖ L√ìGICA DE ADMINISTRADOR
                // Si el usuario es administrador (ID est√° en ADMIN_USER_IDS), obtener todas las cl√≠nicas
                // Si es usuario normal, obtener solo sus cl√≠nicas asignadas
                if (this.isAdmin()) {
                    console.log('üîë Usuario administrador detectado (ID:', user.id_usuario, ')');
                    // Para el admin, obtener todas las cl√≠nicas del sistema
                    this.contactsService.getClinicas().subscribe((allClinicas: any[]) => {
                        this.allClinics = allClinicas;
                        console.log('üìã Admin: Cargadas', allClinicas.length, 'cl√≠nicas del sistema');
                        this.setupUserInterface();
                    });
                } else {
                    console.log('üîµ Usuario normal detectado (ID:', user.id_usuario, ')');
                    // Para usuarios normales, obtener solo sus cl√≠nicas asignadas
                    this.contactsService.getClinicasByUser(user.id_usuario).subscribe((response: any) => {
                        let clinicsArray = [];
                        if (Array.isArray(response)) {
                            clinicsArray = response;
                        } else if (response.clinicas) {
                            clinicsArray = response.clinicas;
                        } else {
                            clinicsArray = response.clinicas || [];
                        }
                        this.allClinics = clinicsArray;
                        console.log('üìã Usuario: Cargadas', clinicsArray.length, 'cl√≠nicas asignadas');
                        this.setupUserInterface();
                    });
                }
            }
        });
    }

    // ‚úÖ M√âTODO PARA CONFIGURAR LA INTERFAZ
    private setupUserInterface(): void {
        // Cargar el rol almacenado (o usar el primer rol disponible)
        const storedRole = localStorage.getItem('selectedRole');
        this.updateRolesFromClinics();
        if (storedRole && this.roles.includes(storedRole)) {
            this.selectedRole = storedRole;
        } else {
            this.selectedRole = this.roles[0] || '';
            localStorage.setItem('selectedRole', this.selectedRole);
        }

        // Filtrar cl√≠nicas seg√∫n el rol
        this.filterClinicsByRole();
        this.updateGroupedClinics();

        // Recuperar la selecci√≥n de cl√≠nica del localStorage
        const storedClinic = localStorage.getItem('selectedClinicId');
        if (storedClinic) {
            if (storedClinic.includes(',')) {
                this.selectedClinic = {
                    isGroup: true,
                    clinicasIds: storedClinic.split(',').map(id => parseInt(id, 10))
                };
            } else {
                const found = this.allClinics.find(c => String(c.id_clinica) === storedClinic);
                if (found) {
                    this.selectedClinic = found;
                }
            }
        }

        // Si la selecci√≥n actual no es v√°lida para el rol, se actualizar√° en updateFinalClinicsAndPatients
        this.updateFinalClinicsAndPatients();
    }

    ngOnDestroy(): void {
        this._unsubscribeAll.next(null);
        this._unsubscribeAll.complete();
    }

    toggleNavigation(name: string): void {
        // Get the navigation
        const navigation = this._fuseNavigationService.getComponent<FuseVerticalNavigationComponent>(name);

        if (navigation) {
            // Toggle the opened status
            navigation.toggle();
        }
    }

    // Se invoca cuando se selecciona una cl√≠nica o grupo en el men√∫ lateral
    onClinicChange(selected: any): void {
        this.selectedClinic = selected;

        if (selected === null) {
            // "Sin grupo" seleccionado - mostrar todas las cl√≠nicas del rol
            localStorage.removeItem('selectedClinicId');
        } else if (selected.isGroup) {
            const ids = selected.clinicasIds ? selected.clinicasIds.join(',') : null;
            localStorage.setItem('selectedClinicId', ids || '');
        } else {
            localStorage.setItem('selectedClinicId', String(selected.id_clinica));
        }

        this.updateFinalClinicsAndPatients();
    }

    // Se invoca cuando se cambia el rol en el header
    onRoleChange(role: string): void {
        this.selectedRole = role;
        localStorage.setItem('selectedRole', role);
        this.filterClinicsByRole();
        this.updateGroupedClinics();
        this.updateFinalClinicsAndPatients();
    }

    // ‚úÖ M√âTODO CORREGIDO: Combina el filtro por rol y la selecci√≥n actual para obtener la lista final
    private updateFinalClinicsAndPatients(): void {
        let finalClinics: any[] = [];

        // ‚úÖ L√ìGICA DE ADMINISTRADOR CORREGIDA
        // Si es admin con rol "admin", mostrar todas las cl√≠nicas sin filtros
        if (this.isAdmin() && this.selectedRole === 'admin') {
            finalClinics = [...this.allClinics];
            console.log('üîë Admin: Mostrando todas las cl√≠nicas (', finalClinics.length, ')');
        } else {
            // ‚úÖ CORRECCI√ìN: Para admin, siempre publicar todas las cl√≠nicas
            this._clinicFilterService.setFilteredClinics(finalClinics);

            // ‚úÖ CORRECCI√ìN: Para admin, determinar filtro basado en selecci√≥n lateral
            let clinicFilter: string | null = null;

            if (this.selectedClinic) {
                if (this.selectedClinic.isGroup) {
                    // Si seleccion√≥ un grupo, filtrar por esas cl√≠nicas
                    clinicFilter = this.selectedClinic.clinicasIds.join(',');
                    console.log('üîë Admin: Filtrando por grupo con IDs:', clinicFilter);
                } else {
                    // Si seleccion√≥ una cl√≠nica espec√≠fica, filtrar por esa cl√≠nica
                    clinicFilter = String(this.selectedClinic.id_clinica);
                    console.log('üîë Admin: Filtrando por cl√≠nica ID:', clinicFilter);
                }
            } else {
                // Si no seleccion√≥ nada espec√≠fico, mostrar todos los pacientes
                clinicFilter = null;
                console.log('üîë Admin: Sin filtro (todos los pacientes)');
            }

            this._clinicFilterService.setSelectedClinicId(clinicFilter);
            this._pacientesService.getPacientes(clinicFilter).subscribe();
            return; // ‚úÖ IMPORTANTE: Salir aqu√≠ para evitar la l√≥gica normal
        }

        // ‚úÖ L√ìGICA CORREGIDA PARA USUARIOS NO-ADMIN
        // Siempre publicar todas las cl√≠nicas filtradas por rol para el desplegable
        this._clinicFilterService.setFilteredClinics([...this.roleFilteredClinics]);

        // Determinar el filtro de pacientes basado en la selecci√≥n lateral
        let clinicFilter: string | null = null;

        if (!this.selectedClinic) {
            // ‚úÖ CORRECCI√ìN PRINCIPAL: Si no hay selecci√≥n espec√≠fica (ej: "Sin grupo"),
            // mostrar pacientes de TODAS las cl√≠nicas del rol actual, mostrar todos
            const allClinicIds = this.roleFilteredClinics.map(c => c.id_clinica);
            clinicFilter = allClinicIds.length > 0 ? allClinicIds.join(',') : null;
            console.log('üîµ Usuario: Sin selecci√≥n espec√≠fica - mostrando pacientes de todas las cl√≠nicas del rol:', clinicFilter);
        } else if (this.selectedClinic.isGroup) {
            // Si seleccion√≥ un grupo espec√≠fico, filtrar por esas cl√≠nicas
            const validClinicIds = this.selectedClinic.clinicasIds.filter(id =>
                this.roleFilteredClinics.some(c => c.id_clinica === id)
            );
            clinicFilter = validClinicIds.length > 0 ? validClinicIds.join(',') : null;
            console.log('üîµ Usuario: Filtrando por grupo con IDs:', clinicFilter);
        } else {
            // Si seleccion√≥ una cl√≠nica espec√≠fica, verificar que est√© en las cl√≠nicas del rol
            const isValidClinic = this.roleFilteredClinics.some(c => c.id_clinica === this.selectedClinic.id_clinica);
            if (isValidClinic) {
                clinicFilter = String(this.selectedClinic.id_clinica);
                console.log('üîµ Usuario: Filtrando por cl√≠nica ID:', clinicFilter);
            } else {
                // Si la cl√≠nica seleccionada no es v√°lida para el rol actual, mostrar todas
                const allClinicIds = this.roleFilteredClinics.map(c => c.id_clinica);
                clinicFilter = allClinicIds.length > 0 ? allClinicIds.join(',') : null;
                console.log('üîµ Usuario: Cl√≠nica seleccionada no v√°lida para el rol - mostrando todas:', clinicFilter);
                // Resetear la selecci√≥n
                this.selectedClinic = null;
                localStorage.removeItem('selectedClinicId');
            }
        }

        this._clinicFilterService.setSelectedClinicId(clinicFilter);
        this._pacientesService.getPacientes(clinicFilter).subscribe();
    }

    // ‚úÖ M√âTODO CORREGIDO: Filtra las cl√≠nicas seg√∫n el rol seleccionado
    filterClinicsByRole(): void {
        console.log('üîç Filtrando cl√≠nicas para rol:', this.selectedRole);
        
        // ‚úÖ L√ìGICA DE ADMINISTRADOR
        if (this.isAdmin() && this.selectedRole === 'admin') {
            this.roleFilteredClinics = [...this.allClinics];
            console.log('üîë Admin: Mostrando todas las cl√≠nicas (', this.roleFilteredClinics.length, ')');
            return;
        }

        // ‚úÖ L√ìGICA PARA USUARIOS NORMALES: Filtrar por rol
        this.roleFilteredClinics = this.allClinics.filter(clinica => {
            const pivot = clinica.UsuarioClinica || clinica.usuarioClinica;
            if (!pivot) return false;
            
            // Normalizar el rol de la cl√≠nica para comparar
            const clinicRole = this.normalizeRole(pivot.rol_clinica);
            const selectedRoleNormalized = this.normalizeRole(this.selectedRole);
            
            // Incluir la cl√≠nica si el rol coincide
            const matches = clinicRole === selectedRoleNormalized;
            
            if (matches) {
                console.log('‚úÖ Cl√≠nica incluida:', clinica.nombre_clinica, 'por rol:', clinicRole);
            }
            
            return matches;
        });
        
        console.log('üìä Cl√≠nicas filtradas para rol', this.selectedRole + ':', this.roleFilteredClinics.length);
        console.log('üè• Cl√≠nicas:', this.roleFilteredClinics.map(c => c.nombre_clinica));
    }

    // ‚úÖ ACTUALIZAR ROLES INCLUYENDO ADMIN
    updateRolesFromClinics(): void {
        let allRoles: string[] = [];

        // ‚úÖ L√ìGICA DE ADMINISTRADOR
        // Si el usuario es administrador, agregar el rol "admin"
        if (this.isAdmin()) {
            allRoles.push('admin');
            console.log('üîë Rol "admin" agregado para usuario ID:', this.currentUser.id_usuario);
        }

        // ‚úÖ CORRECCI√ìN: Solo agregar roles que realmente tienen cl√≠nicas asignadas
        this.allClinics.forEach(clinica => {
            const pivot = clinica.UsuarioClinica || clinica.usuarioClinica;
            if (pivot) {
                if (pivot.rol_clinica) {
                    const normalizedRole = this.normalizeRole(pivot.rol_clinica);
                    allRoles.push(normalizedRole);
                    console.log('‚úÖ Rol agregado:', normalizedRole, 'de cl√≠nica:', clinica.nombre_clinica);
                }
                if (pivot.subrol_clinica) {
                    const normalizedSubRole = this.normalizeRole(pivot.subrol_clinica);
                    allRoles.push(normalizedSubRole);
                    console.log('‚úÖ Subrol agregado:', normalizedSubRole, 'de cl√≠nica:', clinica.nombre_clinica);
                }
            }
        });

        // ‚úÖ CORRECCI√ìN: Eliminar duplicados y verificar que cada rol tenga al menos una cl√≠nica
        const uniqueRoles = Array.from(new Set(allRoles));
        
        // ‚úÖ VALIDACI√ìN ADICIONAL: Solo incluir roles que realmente tienen cl√≠nicas disponibles
        this.roles = uniqueRoles.filter(role => {
            if (role === 'admin') return true; // Admin siempre disponible
            
            // Verificar que el rol tenga al menos una cl√≠nica asignada
            const hasClinicas = this.allClinics.some(clinica => {
                const pivot = clinica.UsuarioClinica || clinica.usuarioClinica;
                if (!pivot) return false;
                
                const clinicRole = this.normalizeRole(pivot.rol_clinica);
                const clinicSubRole = this.normalizeRole(pivot.subrol_clinica);
                
                return clinicRole === role || clinicSubRole === role;
            });
            
            if (!hasClinicas) {
                console.log('‚ö†Ô∏è Rol eliminado por no tener cl√≠nicas:', role);
            }
            
            return hasClinicas;
        });
        
        console.log('üìã Roles finales disponibles:', this.roles);
    }

    updateGroupedClinics(): void {
        const grouped: { [group: string]: any[] } = {};
        this.roleFilteredClinics.forEach(clinica => {
            const groupName = (clinica.grupoClinica && clinica.grupoClinica.nombre_grupo)
                ? 'Grupo: ' + clinica.grupoClinica.nombre_grupo
                : 'Sin grupo';
            if (!grouped[groupName]) {
                grouped[groupName] = [];
            }
            grouped[groupName].push(clinica);
        });
        this.groupedClinics = grouped;
    }

    private normalizeRole(role: string): string {
        if (!role) return '';
        return role.toLowerCase().trim();
    }
}

